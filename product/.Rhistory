getwd(C:/Users/Eve/Documents/GitHub/healthrank)
getwd(C:/Users/Eve/Documents/GitHub/healthrank)
getwd(C:Users/Eve/Documents/GitHub/healthrank)
setwd("C:/Users/Eve/Documents/GitHub/healthrank")
getwd()
data<-load(file = "sparcs.rda")
summary(data)
class(data)
View(sparcs)
summary(sparcs)
data<-load(file = "defaultCol.rda")
data
partialData
summary(particialData)
summary(partialData)
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp()
class(data)
data$Hospital
View(partialData)
data
partialData
class(partialData)
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
enableScrollWheel=TRUE))
df <- data.frame(Postcode=c("EC3M 7HA", "EC2P 2EJ"),
Tip=c("Lloyd's",
"Guildhall"))
M2 <- gvisMap(df, "Postcode", "Tip",
options=list(showTip=TRUE, mapType='normal',
enableScrollWheel=TRUE))
df <- data.frame(Postcode=c("EC3M 7HA", "EC2P 2EJ"),
Tip=c("Lloyd's",
"Guildhall"))
M2 <- gvisMap(df, "Postcode", "Tip",
options=list(showTip=TRUE, mapType='normal',
enableScrollWheel=TRUE))
plot(M2)
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp()
shiny::runApp()
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/crime_map/ggmap')
shiny::runApp('~/GitHub/CornellHackathon2016/product')
library("dplyr")
library("data.table")
library("stringr")
library("muStat")
install.packages("muStat")
library("dplyr")
library("data.table")
library("stringr")
library("muStat")
load("hosp.RData")
load("hosp2.RData")
setwd("~/GitHub/CornellHackathon2016/product")
load("hosp.RData")
load("hosp2.RData")
#information of patient
patient <- data.frame(illness = "Mental Diseases and Disorders", Emergency = "Y",
insurance = "N")
#names of hospital
if (patient$insurance == "N")
hospital.list = hospital$`Facility Name`
#ranking list of cases
#names of hospital
if (patient$insurance == "N")
hospital.list = hospital$`Facility Name`
#ranking list of cases
Data <- hosp %>%
filter(`APR MDC Description` == patient$illness) %>%
group_by(`Facility Name`)
Data.ill <- Data %>%
summarise(freq = n())
case <- data.frame(name = Data.ill$`Facility Name`, cases = Data.ill$freq,
case_rank = sort(Data.ill$freq, index.return = T)$ix)
View(case)
View(case)
shiny::runApp()
shiny::runApp()
load("hosp.RData")
load("hosp2.RData")
#information of patient
patient <- data.frame(illness = "Mental Diseases and Disorders", Emergency = "Y",
insurance = "N")
#names of hospital
if (patient$insurance == "N")
hospital.list = hospital$`Facility Name`
#ranking list of cases
Data <- hosp %>%
filter(`APR MDC Description` == patient$illness) %>%
group_by(`Facility Name`)
Data.ill <- Data %>%
summarise(freq = n())
d<-data.frame(x=1,y=2)
d[1,1]
d[0,1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
hosp2
load("hosp2.RData")
hosp2
setwd("~/GitHub/CornellHackathon2016/product")
shiny::runApp()
data<-load(file="hosp2.RData")
data
hosp
data<-load(file="hosp.RData")
data
hosp
library("dplyr")
library("data.table")
library("stringr")
library("muStat")
colsToKeep <- c("Health Service Area", "Facility Name", "Length of Stay",
"APR MDC Description", "Emergency Department Indicator",
"Total Charges")
colsToKeep2 <- c("Facility Name", "Waiting Time", "Recommend Hospital")
hosp <- fread("Hospital_2013.csv", select = colsToKeep)
hosp2 <- fread("hospital_name.csv", select = colsToKeep2)
mean_time <- mean(hosp2$`Waiting Time`[-(which.na(hosp2$`Waiting Time`))])
hosp2$`Waiting Time`[which.na(hosp2$`Waiting Time`)] <- as.integer(mean_time)
mean_recom <- mean(hosp2$`Recommend Hospital`[-(which.na(hosp2$`Recommend Hospital`))])
hosp2$`Recommend Hospital`[which.na(hosp2$`Recommend Hospital`)] <- as.integer(mean_recom)
hosp <- tbl_df(hosp) %>%
na.omit() %>%
filter(`Health Service Area` == "New York City")
hosp$`Total Charges` <- str_replace_all(hosp$`Total Charges`, "[^[:alnum:]]", "")
hosp$`Total Charges` <- as.numeric(hosp$`Total Charges`) / 100
save(hosp, file = "hosp.RData")
shiny::runApp()
hosp2
data<-load("hosp2.RData")
data
hosp2
summary(hosp2)
shiny::runApp()
View(hosp)
hosp2['Facility Name'=="Bronx-Lebanon Hospital Center - Fulton Division",]
hosp2['Facility Name',1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
data
class(data)
partialData
class(partialData)
classs(partialData)
class(partialdata)
shiny::runApp()
partialData
class(partialdata)
partialdata
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
