install.packages("ggplot2")
my.Test.Data<-rexp(100,3)
mean(my.Test.Data)
#[1] 0.30125: AN example of what happened
1/mean(my.Test.Data)
#[1] 3.32
empirical.lambda<-1/mean(my.Test.Data)
#Normal theory quantiles:
CIlow<-empirical.lambda-qnorm(0.975)*empirical.lambda/sqrt(100)
CIhigh<-empirical.lambda+qnorm(0.975)*empirical.lambda/sqrt(100)
#[2.67, 3.97]
CIlow
CIhigh
boot.sampling.dist<-matrix(1,2000)
#Now create 2000 bootstrap samples and compute the value of the stat for each of them
for (i in 1:2000){
boot.sampling.dist[i]<-1/mean(rexp(100,empirical.lambda))
}
#look at the sampling distribution of the stat, according to parametric bootstrap:
windows()
hist(boot.sampling.dist,main="Estimate of sampling distribution of lambda",breaks=50)
#find the quantiles of this distribution
my.quantiles<-quantile(boot.sampling.dist,c(.025,0.975))
my.quantiles
CIbootlow<-2*empirical.lambda-my.quantiles[2]
CIboothigh<-2*empirical.lambda-my.quantiles[1]
boot.estimate.se<-sqrt(var(boot.sampling.dist))
boot.estimate.se
getwd()
data<-read.table("C:/Users/Eve/Desktop/barsoap.txt")
data
data<-read.table("C:/Users/Eve/Desktop/barsoap.txt")
data
data<-read.table("C:/Users/Eve/Desktop/barsoap.txt")
data
data<-read.table("C:/Users/Eve/Desktop/barsoap.txt")
data
data<-read.table("C:/Users/Eve/Desktop/barsoap.txt",header=T)
data
View(data)
data<-read.table("C:/Users/Eve/Desktop/barsoap.txt",header=T)
data
attach(data)
hist(Weights)
dim(data)
hist(Weights,col="lightgreen",border="blue",label=TRUE)
qqnorm(Weights, ylab="Weights")
qqline(Weights, col=2)
bar <- mean(Weights); xbar
xbar <- mean(Weights); xbar
[1] 16.034
s <- sd(Weights); s
s <- sd(Weights); s
############## BOOTSTRAP SIMULATION FROM APPROXIMATE BACKGROUND POP. ##########
# Sample size n = 50, No. Bootstrap Samples B = 10,000
sstar <- replicate(10000,sd(rnorm(50,xbar,s)))
# The bootstrap sample mean gives biased samples.
sstarbar <- mean(sstar); sstarbar
sstarbar <- mean(sstar); sstarbar
# The bootstrap sd gives the biased approximate se
sestar <- sd(sstar); sestar
# The approximate bias from the bootstrap sample.
bias <- sstarbar-s; bias
# Correct the estimated sd of the background population
s-bias
# Correct the estimated se of the bootstrapped sample
sestarstar <- sqrt(sestar^2 + bias^2); sestarstar
ss <- seq(.7,3.8,1/57)
sigmahathat <- s-bias
lines(ss, dnorm(ss,xbar,s),col=4)
lines(ss, dnorm(ss,s,sestar),col=4)
lines(ss, dnorm(ss,sigmahathat,sestarstar),col=3)
sigmahathat <- s-bias
lines(ss, dnorm(ss,xbar,s),col=4)
lines(ss, dnorm(ss,s,sestar),col=4)
lines(ss, dnorm(ss,sigmahathat,sestarstar),col=3)
######## HISTOGRAM OF BOOTSTRAPPED SAMPLE s* WITH NORMAL SUPERIMPOSED ##########
hist(sstar, xlab= "s*", main = paste("Histogram of Bootstrapped sd with xbar =",
+ xb, ", s =", sb), col = "gold", freq = F)
# Plot normals with bootstrapped mean and sd
# Uncorrected N(s,sestar) Corrected N(sigmahathat,sestarstar)
lines(ss, dnorm(ss,s,sestar),col=4)
lines(ss, dnorm(ss,sigmahathat,sestarstar),col=2)
legend(1.1, 1.9, legend = c("N(s,se*)\nNo Correction\n",
+ "N(s**,se**)\nBias Corrected\n"), fill = c(4,2), bg = "white")
sstarbar <- mean(sstar); sstarbar
# The bootstrap sd gives the biased approximate se
sestar <- sd(sstar); sestar
# The approximate bias from the bootstrap sample.
bias <- sstarbar-s; bias
# Correct the estimated sd of the background population
s-bias
# Correct the estimated se of the bootstrapped sample
sestarstar <- sqrt(sestar^2 + bias^2); sestarstar
ss <- seq(.7,3.8,1/57)
sigmahathat <- s-bias
lines(ss, dnorm(ss,xbar,s),col=4)
lines(ss, dnorm(ss,s,sestar),col=4)
lines(ss, dnorm(ss,sigmahathat,sestarstar),col=3)
######## HISTOGRAM OF BOOTSTRAPPED SAMPLE s* WITH NORMAL SUPERIMPOSED ##########
hist(sstar, xlab= "s*", main = paste("Histogram of Bootstrapped sd with xbar =",
+ xb, ", s =", sb), col = "gold", freq = F)
hist(sstar, xlab= "s*", main = paste("Histogram of Bootstrapped sd with xbar =",
+ xb, ", s =", sb), col = "gold", freq = F)
# Plot normals with bootstrapped mean and sd
# Uncorrected N(s,sestar) Corrected N(sigmahathat,sestarstar)
lines(ss, dnorm(ss,s,sestar),col=4)
lines(ss, dnorm(ss,sigmahathat,sestarstar),col=2)
legend(1.1, 1.9, legend = c("N(s,se*)\nNo Correction\n",
+ "N(s**,se**)\nBias Corrected\n"), fill = c(4,2), bg = "white")
xbar <- mean(Weights); xbar
s <- sd(Weights); s
xbar <- mean(Weights); xbar
s <- sd(Weights); s
############## BOOTSTRAP SIMULATION FROM APPROXIMATE BACKGROUND POP. ##########
# Sample size n = 50, No. Bootstrap Samples B = 10,000
sstar <- replicate(10000,sd(rnorm(50,xbar,s)))
# The bootstrap sample mean gives biased samples.
sstarbar <- mean(sstar); sstarbar
# The bootstrap sd gives the biased approximate se
sestar <- sd(sstar); sestar
# The approximate bias from the bootstrap sample.
bias <- sstarbar-s; bias
# Correct the estimated sd of the background population
s-bias
# Correct the estimated se of the bootstrapped sample
sestarstar <- sqrt(sestar^2 + bias^2); sestarstar
ss <- seq(.7,3.8,1/57)
sigmahathat <- s-bias
data<-read.table("C:/Users/Eve/Desktop/barsoap.txt",header=T)
data
attach(data)
hist(Weights)
hist(Weights,col="lightgreen",border="blue",label=TRUE)
qqnorm(Weights, ylab="Weights")
qqline(Weights, col=2)
############# FIND DISTRIBUTION PARAMETERS ####################################
xbar <- mean(Weights); xbar
s <- sd(Weights); s
############## BOOTSTRAP SIMULATION FROM APPROXIMATE BACKGROUND POP. ##########
# Sample size n = 50, No. Bootstrap Samples B = 10,000
sstar <- replicate(10000,sd(rnorm(50,xbar,s)))
# The bootstrap sample mean gives biased samples.
sstarbar <- mean(sstar); sstarbar
# The bootstrap sd gives the biased approximate se
sestar <- sd(sstar); sestar
# The approximate bias from the bootstrap sample.
bias <- sstarbar-s; bias
# Correct the estimated sd of the background population
s-bias
# Correct the estimated se of the bootstrapped sample
sestarstar <- sqrt(sestar^2 + bias^2); sestarstar
ss <- seq(.7,3.8,1/57)
sigmahathat <- s-bias
lines(ss, dnorm(ss,xbar,s),col=4)
lines(ss, dnorm(ss,s,sestar),col=4)
lines(ss, dnorm(ss,sigmahathat,sestarstar),col=3)
ss
lines(ss, dnorm(ss,xbar,s),col=4)
lines(ss, dnorm(ss,s,sestar),col=4)
lines(ss, dnorm(ss,sigmahathat,sestarstar),col=3)
lines(ss, dnorm(ss,xbar,s),col=4)
lines(ss, dnorm(ss,s,sestar),col=4)
lines(ss, dnorm(ss,sigmahathat,sestarstar),col=3)
######## HISTOGRAM OF BOOTSTRAPPED SAMPLE s* WITH NORMAL SUPERIMPOSED ##########
hist(sstar, xlab= "s*", main = paste("Histogram of Bootstrapped sd with xbar =",
+ xb, ", s =", sb), col = "gold", freq = F)
lines(ss, dnorm(ss,s,sestar),col=4)
lines(ss, dnorm(ss,sigmahathat,sestarstar),col=2)
legend(1.1, 1.9, legend = c("N(s,se*)\nNo Correction\n",
legend(1.1, 1.9, legend = c("N(s,se*)\nNo Correction\n"+ "N(s**,se**)\nBias Corrected\n"), fill = c(4,2), bg = "white")
legend(1.1, 1.9, legend = c("N(s,se*)\nNo Correction\n","N(s**,se**)\nBias Corrected\n"), fill = c(4,2), bg = "white")
hist(sstar, xlab= "s*", main = paste("Histogram of Bootstrapped sd with xbar =",+ xb, ", s =", sb), col = "gold", freq = F)
######## HISTOGRAM OF BOOTSTRAPPED SAMPLE s* WITH NORMAL SUPERIMPOSED ##########
hist(sstar, xlab= "s*", main = paste("Histogram of Bootstrapped sd with xbar =", xb, ", s =", sb), col = "gold", freq = F)
# Correct the estimated sd of the background population
s-bias
# Correct the estimated se of the bootstrapped sample
sestarstar <- sqrt(sestar^2 + bias^2); sestarstar
ss <- seq(.7,3.8,1/57)
sigmahathat <- s-bias
lines(ss, dnorm(ss,xbar,s),col=4)
lines(ss, dnorm(ss,s,sestar),col=4)
lines(ss, dnorm(ss,sigmahathat,sestarstar),col=3)
######## HISTOGRAM OF BOOTSTRAPPED SAMPLE s* WITH NORMAL SUPERIMPOSED ##########
hist(sstar, xlab= "s*", main = paste("Histogram of Bootstrapped sd with xbar =", xbar, ", s =", s), col = "gold", freq = F)
# Plot normals with bootstrapped mean and sd
# Uncorrected N(s,sestar) Corrected N(sigmahathat,sestarstar)
lines(ss, dnorm(ss,s,sestar),col=4)
lines(ss, dnorm(ss,sigmahathat,sestarstar),col=2)
legend(1.1, 1.9, legend = c("N(s,se*)\nNo Correction\n","N(s**,se**)\nBias Corrected\n"), fill = c(4,2), bg = "white")
legend(1.1, 1.9, legend = c("N(s,se*)\nNo Correction\n","N(s**,se**)\nBias Corrected\n"), fill = c(3,2), bg = "white")
legend(1.1, 1.9, legend = c("N(s,se*)\nNo Correction\n","N(s**,se**)\nBias Corrected\n"), fill = c(4,2), bg = "white")
legend(1.1, 3, legend = c("N(s,se*)\nNo Correction\n","N(s**,se**)\nBias Corrected\n"), fill = c(4,2), bg = "white")
source('C:/Users/Eve/Desktop/barsoap.R', echo=TRUE)
source('C:/Users/Eve/Desktop/barsoap.R', echo=TRUE)
source('C:/Users/Eve/Desktop/barsoap.R', echo=TRUE)
pt(4/3,16)
1-pt(4/3,16)
qt(0.9,12)
qf(15,9,0.95)
qf(0.95,15,9)
x<-c(0,0.1,0.2,0.3)
y1<-0.1875*x+0.07
y2<-0.4*x+0.07
plot(y1~x,xlab="standard deviation",ylab="expected return",type="l")
lines(y2~x)
lines(y2~x,col="red")
x<-c(0,0.1,0.2,0.3)
y1<-0.1875*x+0.07
y2<-0.4*x+0.07
plot(y1~x,main="CML:black & CAL:red",xlim=c(0,0.3),xlab="standard deviation",ylab="expected return",type="l")
lines(y2~x,col="red")
x<-c(0.1,0.2,0.3,0.4)
y1<-0.1875*x+0.07
y2<-0.4*x+0.07
plot(y1~x,main="CML:black & CAL:red",xlim=c(0,0.3),xlab="standard deviation",ylab="expected return",type="l")
lines(y2~x,col="red")
x<-c(0,0.1,0.2,0.3,0.4)
y1<-0.1875*x+0.07
y2<-0.4*x+0.07
plot(y1~x,main="CML:black & CAL:red",xlim=c(0,0.3),xlab="standard deviation",ylab="expected return",type="l")
lines(y2~x,col="red")
x<-c(0,0.1,0.2,0.3,0.4)
y1<-0.1875*x+0.07
y2<-0.4*x+0.07
plot(y1~x,main="CML:black & CAL:red",xlim=c(0,0.3),ylim=c(0.06,0.15),xlab="standard deviation",ylab="expected return",type="l")
lines(y2~x,col="red")
x<-c(0,0.1,0.2,0.3,0.4)
y1<-0.1875*x+0.07
y2<-0.4*x+0.07
plot(y1~x,main="CML:black & CAL:red",xlim=c(0.1,0.3),ylim=c(0.06,0.15),xlab="standard deviation",ylab="expected return",type="l")
lines(y2~x,col="red")
x<-c(0,0.1,0.2,0.3,0.4)
y1<-0.1875*x+0.07
y2<-0.4*x+0.07
plot(y1~x,main="CML:black & CAL:red",xlim=c(0,0.4),ylim=c(0.06,0.15),xlab="standard deviation",ylab="expected return",type="l")
lines(y2~x,col="red")
x<-c(0,0.1,0.2,0.3,0.4)
y1<-0.1875*x+0.07
y2<-0.4*x+0.07
plot(y1~x,main="CML:black & CAL:red",xlim=c(0,0.5),ylim=c(0.06,0.15),xlab="standard deviation",ylab="expected return",type="l")
lines(y2~x,col="red")
x<-c(0.0,0.1,0.2,0.3,0.4)
y1<-0.1875*x+0.07
y2<-0.4*x+0.07
plot(y1~x,main="CML:black & CAL:red",xlim=c(0,0.5),ylim=c(0.06,0.15),xlab="standard deviation",ylab="expected return",type="l")
lines(y2~x,col="red")
x<-c(0.0,0.1,0.2,0.3,0.4)
y1<-0.1875*x+0.07
y2<-0.4*x+0.07
plot(y1~x,main="CML:black & CAL:red",xlim=c(0,0.5),ylim=c(0.06,0.15),xlab="standard deviation",ylab="expected return",type="l")
axis(side=1, at=c(0,0.1,0.2,0.3,0.4))
lines(y2~x,col="red")
x<-c(0.0,0.1,0.2,0.3,0.4)
y1<-0.1875*x+0.07
y2<-0.4*x+0.07
axis(side=1, at=c(0,0.1,0.2,0.3,0.4))
plot(y1~x,main="CML:black & CAL:red",xlim=c(0,0.5),ylim=c(0.06,0.15),xlab="standard deviation",ylab="expected return",type="l")
lines(y2~x,col="red")
install.packages("knitr")
install.packages("dplyr")
rm(ls())
rm(list=ls())
gender<-c(rep("female",691),rep("male",685))
gender<-factors(gender)
gender<-factor(gender)
gender
gender<-factor(gender,levels=c("male,female"))
gender
gender<-c(rep("female",691),rep("male",685))
factor(gender,levels=c(1,2))
qnorm(0.99)
shiny::runApp('GitHub/CornellHackathon2016/shiny')
shiny::runApp('GitHub/CornellHackathon2016/shiny')
shiny::runApp('GitHub/CornellHackathon2016/shiny')
shiny::runApp('GitHub/CornellHackathon2016/shiny')
shiny::runApp('GitHub/CornellHackathon2016/shiny')
shiny::runApp('GitHub/CornellHackathon2016/shiny')
shiny::runApp('GitHub/CornellHackathon2016/shiny')
shiny::runApp('crime_map')
list("1"=1,"2"=2,"3"=3)
list("1"=1,"1"=1,"2"=2,"3"=3)
a<-list("1"=1,"1"=1,"2"=2,"3"=3)
a[[1]]
a[[2]]
a[1]
a[1]$1
a[1]$`1`
a$`1`
a$1
a$`2`
a$'1'
a$`3`
install.packages("googleVis")
install.packages("ggmap")
setwd("C:/Users/Eve/Documents/crime_map/ggmap")
getwd
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
load("C:/Users/Eve/Documents/GitHub/healthrank/defaultCol.rda")
defaultCol
data<-load("C:/Users/Eve/Documents/GitHub/healthrank/defaultCol.rda")
data
data$partialData
partialData
summary(partialData)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("C:/Users/Eve/Documents/crime_map/ggmap")
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
partialData
summary(partialData)
shiny::runApp('~/GitHub/healthrank')
diagnosis
data<-load(file = "diagnosis.rda")
load("C:/Users/Eve/Documents/GitHub/healthrank/diagnosis.rda")
data<-load("C:/Users/Eve/Documents/GitHub/healthrank/diagnosis.rda"
)
data
diagnosis
shiny::runApp('~/GitHub/healthrank')
data<-load("C:/Users/Eve/Documents/GitHub/healthrank/sparcs.rda"
+ )
data<-load("C:/Users/Eve/Documents/GitHub/healthrank/sparcs.rda")
data
sparcs
